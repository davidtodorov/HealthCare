// <auto-generated />
using System;
using HealthCare.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(HealthCareDbContext))]
    [Migration("20210506201658_inherit_entity_class")]
    partial class inherit_entity_class
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("HealthCare.Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(4667),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(4675),
                            Name = "Aesthetic plastic and reconstructive surgery"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5592),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5593),
                            Name = "Allergology"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5595),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5596),
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5596),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5597),
                            Name = "Cardiovascular surgery"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5598),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5599),
                            Name = "Chest surgery"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5599),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5600),
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5602),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5602),
                            Name = "Ear nose and throat"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5603),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5604),
                            Name = "Endocrinology diabetes and metabolic diseases"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5605),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5605),
                            Name = "Gastroenterology"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5606),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5607),
                            Name = "General surgery"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5607),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5608),
                            Name = "Hematology"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5609),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5610),
                            Name = "Infections diseases"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5611),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5612),
                            Name = "Internal medicine"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5613),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5614),
                            Name = "Nephrology"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5615),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5616),
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5616),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5617),
                            Name = "Nutrition and dietetics"
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5618),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5619),
                            Name = "Obstetrics and genecology"
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5620),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5620),
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 19,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5621),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5622),
                            Name = "Ophthalmology"
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5623),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5624),
                            Name = "Orthopedics"
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5624),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5625),
                            Name = "Physiotherapy"
                        },
                        new
                        {
                            Id = 22,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5626),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5626),
                            Name = "Psychiatry"
                        },
                        new
                        {
                            Id = 23,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5671),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5671),
                            Name = "Radiotherapy"
                        },
                        new
                        {
                            Id = 24,
                            CreatedBy = "script",
                            CreatedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5672),
                            ModifiedBy = "script",
                            ModifiedOn = new DateTime(2021, 5, 6, 20, 16, 58, 77, DateTimeKind.Utc).AddTicks(5673),
                            Name = "Rheumatology"
                        });
                });

            modelBuilder.Entity("HealthCare.Core.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthCare.Core.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("HealthCare.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HealthCare.Core.Entities.Doctor", b =>
                {
                    b.HasOne("HealthCare.Core.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Entities.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Hospital");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HealthCare.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HealthCare.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HealthCare.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
