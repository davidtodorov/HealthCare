/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { identityLogin } from '../fn/identity/identity-login';
import { IdentityLogin$Params } from '../fn/identity/identity-login';
import { identityLogout } from '../fn/identity/identity-logout';
import { IdentityLogout$Params } from '../fn/identity/identity-logout';
import { identityRegister } from '../fn/identity/identity-register';
import { IdentityRegister$Params } from '../fn/identity/identity-register';
import { identityRoles } from '../fn/identity/identity-roles';
import { IdentityRoles$Params } from '../fn/identity/identity-roles';
import { identityVerify } from '../fn/identity/identity-verify';
import { IdentityVerify$Params } from '../fn/identity/identity-verify';
import { UserAndRoles } from '../models/user-and-roles';

@Injectable({ providedIn: 'root' })
export class IdentityService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `identityLogin()` */
  static readonly IdentityLoginPath = '/api/Identity/Login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `identityLogin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  identityLogin$Response(params: IdentityLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = identityLogin(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `identityLogin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  identityLogin(params: IdentityLogin$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.identityLogin$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `identityRegister()` */
  static readonly IdentityRegisterPath = '/api/Identity/Register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `identityRegister()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  identityRegister$Response(params: IdentityRegister$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = identityRegister(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `identityRegister$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  identityRegister(params: IdentityRegister$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.identityRegister$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `identityLogout()` */
  static readonly IdentityLogoutPath = '/api/Identity/Logout';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `identityLogout()` instead.
   *
   * This method doesn't expect any request body.
   */
  identityLogout$Response(params?: IdentityLogout$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = identityLogout(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `identityLogout$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  identityLogout(params?: IdentityLogout$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.identityLogout$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `identityVerify()` */
  static readonly IdentityVerifyPath = '/api/Identity/Verify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `identityVerify()` instead.
   *
   * This method doesn't expect any request body.
   */
  identityVerify$Response(params?: IdentityVerify$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = identityVerify(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `identityVerify$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  identityVerify(params?: IdentityVerify$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.identityVerify$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `identityRoles()` */
  static readonly IdentityRolesPath = '/api/Identity/Roles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `identityRoles()` instead.
   *
   * This method doesn't expect any request body.
   */
  identityRoles$Response(params?: IdentityRoles$Params, context?: HttpContext): Observable<StrictHttpResponse<UserAndRoles>> {
    const obs = identityRoles(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `identityRoles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  identityRoles(params?: IdentityRoles$Params, context?: HttpContext): Observable<UserAndRoles> {
    const resp = this.identityRoles$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<UserAndRoles>): UserAndRoles => r.body)
    );
  }

}
