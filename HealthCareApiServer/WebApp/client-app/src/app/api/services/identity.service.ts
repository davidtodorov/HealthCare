/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiIdentityLoginPost } from '../fn/identity/api-identity-login-post';
import { ApiIdentityLoginPost$Params } from '../fn/identity/api-identity-login-post';
import { apiIdentityLogoutPost } from '../fn/identity/api-identity-logout-post';
import { ApiIdentityLogoutPost$Params } from '../fn/identity/api-identity-logout-post';
import { apiIdentityRegisterPost } from '../fn/identity/api-identity-register-post';
import { ApiIdentityRegisterPost$Params } from '../fn/identity/api-identity-register-post';
import { apiIdentityRolesGet$Json } from '../fn/identity/api-identity-roles-get-json';
import { ApiIdentityRolesGet$Json$Params } from '../fn/identity/api-identity-roles-get-json';
import { apiIdentityRolesGet$Plain } from '../fn/identity/api-identity-roles-get-plain';
import { ApiIdentityRolesGet$Plain$Params } from '../fn/identity/api-identity-roles-get-plain';
import { apiIdentityVerifyPost } from '../fn/identity/api-identity-verify-post';
import { ApiIdentityVerifyPost$Params } from '../fn/identity/api-identity-verify-post';

@Injectable({ providedIn: 'root' })
export class IdentityService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiIdentityLoginPost()` */
  static readonly ApiIdentityLoginPostPath = '/api/Identity/Login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiIdentityLoginPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiIdentityLoginPost$Response(params?: ApiIdentityLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiIdentityLoginPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiIdentityLoginPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiIdentityLoginPost(params?: ApiIdentityLoginPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiIdentityLoginPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiIdentityRegisterPost()` */
  static readonly ApiIdentityRegisterPostPath = '/api/Identity/Register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiIdentityRegisterPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiIdentityRegisterPost$Response(params?: ApiIdentityRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiIdentityRegisterPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiIdentityRegisterPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiIdentityRegisterPost(params?: ApiIdentityRegisterPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiIdentityRegisterPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiIdentityLogoutPost()` */
  static readonly ApiIdentityLogoutPostPath = '/api/Identity/Logout';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiIdentityLogoutPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiIdentityLogoutPost$Response(params?: ApiIdentityLogoutPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiIdentityLogoutPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiIdentityLogoutPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiIdentityLogoutPost(params?: ApiIdentityLogoutPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiIdentityLogoutPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiIdentityVerifyPost()` */
  static readonly ApiIdentityVerifyPostPath = '/api/Identity/Verify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiIdentityVerifyPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiIdentityVerifyPost$Response(params?: ApiIdentityVerifyPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiIdentityVerifyPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiIdentityVerifyPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiIdentityVerifyPost(params?: ApiIdentityVerifyPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiIdentityVerifyPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiIdentityRolesGet()` */
  static readonly ApiIdentityRolesGetPath = '/api/Identity/Roles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiIdentityRolesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiIdentityRolesGet$Plain$Response(params?: ApiIdentityRolesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    const obs = apiIdentityRolesGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiIdentityRolesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiIdentityRolesGet$Plain(params?: ApiIdentityRolesGet$Plain$Params, context?: HttpContext): Observable<Array<string>> {
    const resp = this.apiIdentityRolesGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiIdentityRolesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiIdentityRolesGet$Json$Response(params?: ApiIdentityRolesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    const obs = apiIdentityRolesGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiIdentityRolesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiIdentityRolesGet$Json(params?: ApiIdentityRolesGet$Json$Params, context?: HttpContext): Observable<Array<string>> {
    const resp = this.apiIdentityRolesGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

}
