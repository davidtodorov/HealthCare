/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { userChangePassword } from '../fn/user/user-change-password';
import { UserChangePassword$Params } from '../fn/user/user-change-password';
import { userDelete } from '../fn/user/user-delete';
import { UserDelete$Params } from '../fn/user/user-delete';
import { userGet } from '../fn/user/user-get';
import { UserGet$Params } from '../fn/user/user-get';
import { userGetAll } from '../fn/user/user-get-all';
import { UserGetAll$Params } from '../fn/user/user-get-all';
import { UserModel } from '../models/user-model';
import { userPost } from '../fn/user/user-post';
import { UserPost$Params } from '../fn/user/user-post';
import { userPut } from '../fn/user/user-put';
import { UserPut$Params } from '../fn/user/user-put';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userGet()` */
  static readonly UserGetPath = '/api/User/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGet$Response(params: UserGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UserModel>> {
    const obs = userGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGet(params: UserGet$Params, context?: HttpContext): Observable<UserModel> {
    const resp = this.userGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<UserModel>): UserModel => r.body)
    );
  }

  /** Path part for operation `userPut()` */
  static readonly UserPutPath = '/api/User/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userPut$Response(params: UserPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = userPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userPut(params: UserPut$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.userPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `userDelete()` */
  static readonly UserDeletePath = '/api/User/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  userDelete$Response(params: UserDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = userDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userDelete(params: UserDelete$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.userDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `userChangePassword()` */
  static readonly UserChangePasswordPath = '/api/User/{id}/password';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userChangePassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userChangePassword$Response(params: UserChangePassword$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = userChangePassword(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userChangePassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userChangePassword(params: UserChangePassword$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.userChangePassword$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `userGetAll()` */
  static readonly UserGetAllPath = '/api/User';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGetAll$Response(params?: UserGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserModel>>> {
    const obs = userGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGetAll(params?: UserGetAll$Params, context?: HttpContext): Observable<Array<UserModel>> {
    const resp = this.userGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<UserModel>>): Array<UserModel> => r.body)
    );
  }

  /** Path part for operation `userPost()` */
  static readonly UserPostPath = '/api/User';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userPost$Response(params: UserPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = userPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userPost(params: UserPost$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.userPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
