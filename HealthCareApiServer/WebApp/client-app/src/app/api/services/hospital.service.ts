/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiHospitalGet$Json } from '../fn/hospital/api-hospital-get-json';
import { ApiHospitalGet$Json$Params } from '../fn/hospital/api-hospital-get-json';
import { apiHospitalGet$Plain } from '../fn/hospital/api-hospital-get-plain';
import { ApiHospitalGet$Plain$Params } from '../fn/hospital/api-hospital-get-plain';
import { apiHospitalIdDelete } from '../fn/hospital/api-hospital-id-delete';
import { ApiHospitalIdDelete$Params } from '../fn/hospital/api-hospital-id-delete';
import { apiHospitalIdGet$Json } from '../fn/hospital/api-hospital-id-get-json';
import { ApiHospitalIdGet$Json$Params } from '../fn/hospital/api-hospital-id-get-json';
import { apiHospitalIdGet$Plain } from '../fn/hospital/api-hospital-id-get-plain';
import { ApiHospitalIdGet$Plain$Params } from '../fn/hospital/api-hospital-id-get-plain';
import { apiHospitalIdPut } from '../fn/hospital/api-hospital-id-put';
import { ApiHospitalIdPut$Params } from '../fn/hospital/api-hospital-id-put';
import { apiHospitalPost } from '../fn/hospital/api-hospital-post';
import { ApiHospitalPost$Params } from '../fn/hospital/api-hospital-post';
import { HospitalModel } from '../models/hospital-model';

@Injectable({ providedIn: 'root' })
export class HospitalService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiHospitalGet()` */
  static readonly ApiHospitalGetPath = '/api/Hospital';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHospitalGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalGet$Plain$Response(params?: ApiHospitalGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HospitalModel>>> {
    const obs = apiHospitalGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHospitalGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalGet$Plain(params?: ApiHospitalGet$Plain$Params, context?: HttpContext): Observable<Array<HospitalModel>> {
    const resp = this.apiHospitalGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<HospitalModel>>): Array<HospitalModel> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHospitalGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalGet$Json$Response(params?: ApiHospitalGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HospitalModel>>> {
    const obs = apiHospitalGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHospitalGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalGet$Json(params?: ApiHospitalGet$Json$Params, context?: HttpContext): Observable<Array<HospitalModel>> {
    const resp = this.apiHospitalGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<HospitalModel>>): Array<HospitalModel> => r.body)
    );
  }

  /** Path part for operation `apiHospitalPost()` */
  static readonly ApiHospitalPostPath = '/api/Hospital';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHospitalPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiHospitalPost$Response(params?: ApiHospitalPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiHospitalPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHospitalPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiHospitalPost(params?: ApiHospitalPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiHospitalPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiHospitalIdGet()` */
  static readonly ApiHospitalIdGetPath = '/api/Hospital/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHospitalIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalIdGet$Plain$Response(params: ApiHospitalIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<HospitalModel>> {
    const obs = apiHospitalIdGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHospitalIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalIdGet$Plain(params: ApiHospitalIdGet$Plain$Params, context?: HttpContext): Observable<HospitalModel> {
    const resp = this.apiHospitalIdGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<HospitalModel>): HospitalModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHospitalIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalIdGet$Json$Response(params: ApiHospitalIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<HospitalModel>> {
    const obs = apiHospitalIdGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHospitalIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalIdGet$Json(params: ApiHospitalIdGet$Json$Params, context?: HttpContext): Observable<HospitalModel> {
    const resp = this.apiHospitalIdGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<HospitalModel>): HospitalModel => r.body)
    );
  }

  /** Path part for operation `apiHospitalIdPut()` */
  static readonly ApiHospitalIdPutPath = '/api/Hospital/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHospitalIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiHospitalIdPut$Response(params: ApiHospitalIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiHospitalIdPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHospitalIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiHospitalIdPut(params: ApiHospitalIdPut$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiHospitalIdPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiHospitalIdDelete()` */
  static readonly ApiHospitalIdDeletePath = '/api/Hospital/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHospitalIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalIdDelete$Response(params: ApiHospitalIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiHospitalIdDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHospitalIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHospitalIdDelete(params: ApiHospitalIdDelete$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiHospitalIdDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
