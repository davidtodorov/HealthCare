/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { hospitalDelete } from '../fn/hospital/hospital-delete';
import { HospitalDelete$Params } from '../fn/hospital/hospital-delete';
import { hospitalGet } from '../fn/hospital/hospital-get';
import { HospitalGet$Params } from '../fn/hospital/hospital-get';
import { hospitalGetAll } from '../fn/hospital/hospital-get-all';
import { HospitalGetAll$Params } from '../fn/hospital/hospital-get-all';
import { HospitalModel } from '../models/hospital-model';
import { hospitalPost } from '../fn/hospital/hospital-post';
import { HospitalPost$Params } from '../fn/hospital/hospital-post';
import { hospitalPut } from '../fn/hospital/hospital-put';
import { HospitalPut$Params } from '../fn/hospital/hospital-put';

@Injectable({ providedIn: 'root' })
export class HospitalService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `hospitalGetAll()` */
  static readonly HospitalGetAllPath = '/api/Hospital';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hospitalGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  hospitalGetAll$Response(params?: HospitalGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HospitalModel>>> {
    const obs = hospitalGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hospitalGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hospitalGetAll(params?: HospitalGetAll$Params, context?: HttpContext): Observable<Array<HospitalModel>> {
    const resp = this.hospitalGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<HospitalModel>>): Array<HospitalModel> => r.body)
    );
  }

  /** Path part for operation `hospitalPost()` */
  static readonly HospitalPostPath = '/api/Hospital';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hospitalPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hospitalPost$Response(params: HospitalPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = hospitalPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hospitalPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hospitalPost(params: HospitalPost$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.hospitalPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `hospitalGet()` */
  static readonly HospitalGetPath = '/api/Hospital/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hospitalGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  hospitalGet$Response(params: HospitalGet$Params, context?: HttpContext): Observable<StrictHttpResponse<HospitalModel>> {
    const obs = hospitalGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hospitalGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hospitalGet(params: HospitalGet$Params, context?: HttpContext): Observable<HospitalModel> {
    const resp = this.hospitalGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<HospitalModel>): HospitalModel => r.body)
    );
  }

  /** Path part for operation `hospitalPut()` */
  static readonly HospitalPutPath = '/api/Hospital/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hospitalPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hospitalPut$Response(params: HospitalPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = hospitalPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hospitalPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hospitalPut(params: HospitalPut$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.hospitalPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `hospitalDelete()` */
  static readonly HospitalDeletePath = '/api/Hospital/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hospitalDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  hospitalDelete$Response(params: HospitalDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = hospitalDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hospitalDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hospitalDelete(params: HospitalDelete$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.hospitalDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
