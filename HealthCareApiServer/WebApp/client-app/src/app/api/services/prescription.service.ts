/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { prescriptionDelete } from '../fn/prescription/prescription-delete';
import { PrescriptionDelete$Params } from '../fn/prescription/prescription-delete';
import { prescriptionGet } from '../fn/prescription/prescription-get';
import { PrescriptionGet$Params } from '../fn/prescription/prescription-get';
import { prescriptionGetAll } from '../fn/prescription/prescription-get-all';
import { PrescriptionGetAll$Params } from '../fn/prescription/prescription-get-all';
import { prescriptionGetPrescriptionsByAppointmentId } from '../fn/prescription/prescription-get-prescriptions-by-appointment-id';
import { PrescriptionGetPrescriptionsByAppointmentId$Params } from '../fn/prescription/prescription-get-prescriptions-by-appointment-id';
import { PrescriptionModel } from '../models/prescription-model';
import { prescriptionPost } from '../fn/prescription/prescription-post';
import { PrescriptionPost$Params } from '../fn/prescription/prescription-post';
import { prescriptionPut } from '../fn/prescription/prescription-put';
import { PrescriptionPut$Params } from '../fn/prescription/prescription-put';

@Injectable({ providedIn: 'root' })
export class PrescriptionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `prescriptionGetPrescriptionsByAppointmentId()` */
  static readonly PrescriptionGetPrescriptionsByAppointmentIdPath = '/api/Prescription/GetPrescriptionsByAppointmentId';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionGetPrescriptionsByAppointmentId()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionGetPrescriptionsByAppointmentId$Response(params?: PrescriptionGetPrescriptionsByAppointmentId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PrescriptionModel>>> {
    const obs = prescriptionGetPrescriptionsByAppointmentId(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionGetPrescriptionsByAppointmentId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionGetPrescriptionsByAppointmentId(params?: PrescriptionGetPrescriptionsByAppointmentId$Params, context?: HttpContext): Observable<Array<PrescriptionModel>> {
    const resp = this.prescriptionGetPrescriptionsByAppointmentId$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<PrescriptionModel>>): Array<PrescriptionModel> => r.body)
    );
  }

  /** Path part for operation `prescriptionGetAll()` */
  static readonly PrescriptionGetAllPath = '/api/Prescription';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionGetAll$Response(params?: PrescriptionGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PrescriptionModel>>> {
    const obs = prescriptionGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionGetAll(params?: PrescriptionGetAll$Params, context?: HttpContext): Observable<Array<PrescriptionModel>> {
    const resp = this.prescriptionGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<PrescriptionModel>>): Array<PrescriptionModel> => r.body)
    );
  }

  /** Path part for operation `prescriptionPost()` */
  static readonly PrescriptionPostPath = '/api/Prescription';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionPost$Response(params: PrescriptionPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = prescriptionPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionPost(params: PrescriptionPost$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.prescriptionPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `prescriptionGet()` */
  static readonly PrescriptionGetPath = '/api/Prescription/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionGet$Response(params: PrescriptionGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PrescriptionModel>> {
    const obs = prescriptionGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionGet(params: PrescriptionGet$Params, context?: HttpContext): Observable<PrescriptionModel> {
    const resp = this.prescriptionGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PrescriptionModel>): PrescriptionModel => r.body)
    );
  }

  /** Path part for operation `prescriptionPut()` */
  static readonly PrescriptionPutPath = '/api/Prescription/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionPut$Response(params: PrescriptionPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = prescriptionPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionPut(params: PrescriptionPut$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.prescriptionPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `prescriptionDelete()` */
  static readonly PrescriptionDeletePath = '/api/Prescription/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionDelete$Response(params: PrescriptionDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = prescriptionDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionDelete(params: PrescriptionDelete$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.prescriptionDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
