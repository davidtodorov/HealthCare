/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { valuesGet$Json } from '../fn/values/values-get-json';
import { ValuesGet$Json$Params } from '../fn/values/values-get-json';
import { valuesGet$Plain } from '../fn/values/values-get-plain';
import { ValuesGet$Plain$Params } from '../fn/values/values-get-plain';
import { valuesIdDelete } from '../fn/values/values-id-delete';
import { ValuesIdDelete$Params } from '../fn/values/values-id-delete';
import { valuesIdGet$Json } from '../fn/values/values-id-get-json';
import { ValuesIdGet$Json$Params } from '../fn/values/values-id-get-json';
import { valuesIdGet$Plain } from '../fn/values/values-id-get-plain';
import { ValuesIdGet$Plain$Params } from '../fn/values/values-id-get-plain';
import { valuesIdPut } from '../fn/values/values-id-put';
import { ValuesIdPut$Params } from '../fn/values/values-id-put';
import { valuesPost } from '../fn/values/values-post';
import { ValuesPost$Params } from '../fn/values/values-post';

@Injectable({ providedIn: 'root' })
export class ValuesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `valuesGet()` */
  static readonly ValuesGetPath = '/Values';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesGet$Plain$Response(params?: ValuesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    const obs = valuesGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesGet$Plain(params?: ValuesGet$Plain$Params, context?: HttpContext): Observable<Array<string>> {
    const resp = this.valuesGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesGet$Json$Response(params?: ValuesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    const obs = valuesGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesGet$Json(params?: ValuesGet$Json$Params, context?: HttpContext): Observable<Array<string>> {
    const resp = this.valuesGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `valuesPost()` */
  static readonly ValuesPostPath = '/Values';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  valuesPost$Response(params?: ValuesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = valuesPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  valuesPost(params?: ValuesPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.valuesPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `valuesIdGet()` */
  static readonly ValuesIdGetPath = '/Values/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesIdGet$Plain$Response(params: ValuesIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    const obs = valuesIdGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesIdGet$Plain(params: ValuesIdGet$Plain$Params, context?: HttpContext): Observable<string> {
    const resp = this.valuesIdGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesIdGet$Json$Response(params: ValuesIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    const obs = valuesIdGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesIdGet$Json(params: ValuesIdGet$Json$Params, context?: HttpContext): Observable<string> {
    const resp = this.valuesIdGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `valuesIdPut()` */
  static readonly ValuesIdPutPath = '/Values/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  valuesIdPut$Response(params: ValuesIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = valuesIdPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  valuesIdPut(params: ValuesIdPut$Params, context?: HttpContext): Observable<void> {
    const resp = this.valuesIdPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `valuesIdDelete()` */
  static readonly ValuesIdDeletePath = '/Values/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesIdDelete$Response(params: ValuesIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = valuesIdDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesIdDelete(params: ValuesIdDelete$Params, context?: HttpContext): Observable<void> {
    const resp = this.valuesIdDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
