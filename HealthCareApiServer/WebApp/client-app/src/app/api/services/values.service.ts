/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { valuesDelete } from '../fn/values/values-delete';
import { ValuesDelete$Params } from '../fn/values/values-delete';
import { valuesGet } from '../fn/values/values-get';
import { ValuesGet$Params } from '../fn/values/values-get';
import { valuesGetAll } from '../fn/values/values-get-all';
import { ValuesGetAll$Params } from '../fn/values/values-get-all';
import { valuesPost } from '../fn/values/values-post';
import { ValuesPost$Params } from '../fn/values/values-post';
import { valuesPut } from '../fn/values/values-put';
import { ValuesPut$Params } from '../fn/values/values-put';

@Injectable({ providedIn: 'root' })
export class ValuesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `valuesGetAll()` */
  static readonly ValuesGetAllPath = '/Values';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesGetAll$Response(params?: ValuesGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    const obs = valuesGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesGetAll(params?: ValuesGetAll$Params, context?: HttpContext): Observable<Array<string>> {
    const resp = this.valuesGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `valuesPost()` */
  static readonly ValuesPostPath = '/Values';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  valuesPost$Response(params: ValuesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = valuesPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  valuesPost(params: ValuesPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.valuesPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `valuesGet()` */
  static readonly ValuesGetPath = '/Values/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesGet$Response(params: ValuesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    const obs = valuesGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesGet(params: ValuesGet$Params, context?: HttpContext): Observable<string> {
    const resp = this.valuesGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `valuesPut()` */
  static readonly ValuesPutPath = '/Values/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  valuesPut$Response(params: ValuesPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = valuesPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  valuesPut(params: ValuesPut$Params, context?: HttpContext): Observable<void> {
    const resp = this.valuesPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `valuesDelete()` */
  static readonly ValuesDeletePath = '/Values/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `valuesDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesDelete$Response(params: ValuesDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = valuesDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `valuesDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  valuesDelete(params: ValuesDelete$Params, context?: HttpContext): Observable<void> {
    const resp = this.valuesDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
