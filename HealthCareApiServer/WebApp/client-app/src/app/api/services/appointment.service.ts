/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { appointmentBook } from '../fn/appointment/appointment-book';
import { AppointmentBook$Params } from '../fn/appointment/appointment-book';
import { appointmentDelete } from '../fn/appointment/appointment-delete';
import { AppointmentDelete$Params } from '../fn/appointment/appointment-delete';
import { appointmentGet } from '../fn/appointment/appointment-get';
import { AppointmentGet$Params } from '../fn/appointment/appointment-get';
import { appointmentGetAll } from '../fn/appointment/appointment-get-all';
import { AppointmentGetAll$Params } from '../fn/appointment/appointment-get-all';
import { AppointmentModel } from '../models/appointment-model';
import { appointmentPost } from '../fn/appointment/appointment-post';
import { AppointmentPost$Params } from '../fn/appointment/appointment-post';
import { appointmentPut } from '../fn/appointment/appointment-put';
import { AppointmentPut$Params } from '../fn/appointment/appointment-put';
import { appointmentUpdateStatus } from '../fn/appointment/appointment-update-status';
import { AppointmentUpdateStatus$Params } from '../fn/appointment/appointment-update-status';

@Injectable({ providedIn: 'root' })
export class AppointmentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `appointmentBook()` */
  static readonly AppointmentBookPath = '/api/Appointment/Book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `appointmentBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  appointmentBook$Response(params: AppointmentBook$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = appointmentBook(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `appointmentBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  appointmentBook(params: AppointmentBook$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.appointmentBook$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `appointmentUpdateStatus()` */
  static readonly AppointmentUpdateStatusPath = '/api/Appointment/UpdateStatus';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `appointmentUpdateStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  appointmentUpdateStatus$Response(params: AppointmentUpdateStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = appointmentUpdateStatus(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `appointmentUpdateStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  appointmentUpdateStatus(params: AppointmentUpdateStatus$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.appointmentUpdateStatus$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `appointmentGetAll()` */
  static readonly AppointmentGetAllPath = '/api/Appointment';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `appointmentGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  appointmentGetAll$Response(params?: AppointmentGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AppointmentModel>>> {
    const obs = appointmentGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `appointmentGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  appointmentGetAll(params?: AppointmentGetAll$Params, context?: HttpContext): Observable<Array<AppointmentModel>> {
    const resp = this.appointmentGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<AppointmentModel>>): Array<AppointmentModel> => r.body)
    );
  }

  /** Path part for operation `appointmentPost()` */
  static readonly AppointmentPostPath = '/api/Appointment';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `appointmentPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  appointmentPost$Response(params: AppointmentPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = appointmentPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `appointmentPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  appointmentPost(params: AppointmentPost$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.appointmentPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `appointmentGet()` */
  static readonly AppointmentGetPath = '/api/Appointment/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `appointmentGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  appointmentGet$Response(params: AppointmentGet$Params, context?: HttpContext): Observable<StrictHttpResponse<AppointmentModel>> {
    const obs = appointmentGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `appointmentGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  appointmentGet(params: AppointmentGet$Params, context?: HttpContext): Observable<AppointmentModel> {
    const resp = this.appointmentGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<AppointmentModel>): AppointmentModel => r.body)
    );
  }

  /** Path part for operation `appointmentPut()` */
  static readonly AppointmentPutPath = '/api/Appointment/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `appointmentPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  appointmentPut$Response(params: AppointmentPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = appointmentPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `appointmentPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  appointmentPut(params: AppointmentPut$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.appointmentPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `appointmentDelete()` */
  static readonly AppointmentDeletePath = '/api/Appointment/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `appointmentDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  appointmentDelete$Response(params: AppointmentDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = appointmentDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `appointmentDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  appointmentDelete(params: AppointmentDelete$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.appointmentDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
