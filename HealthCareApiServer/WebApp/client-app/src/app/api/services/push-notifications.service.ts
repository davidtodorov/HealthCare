/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { pushNotificationsGetPublicKey } from '../fn/push-notifications/push-notifications-get-public-key';
import { PushNotificationsGetPublicKey$Params } from '../fn/push-notifications/push-notifications-get-public-key';
import { pushNotificationsSendTestNotification } from '../fn/push-notifications/push-notifications-send-test-notification';
import { PushNotificationsSendTestNotification$Params } from '../fn/push-notifications/push-notifications-send-test-notification';
import { pushNotificationsSubscribe } from '../fn/push-notifications/push-notifications-subscribe';
import { PushNotificationsSubscribe$Params } from '../fn/push-notifications/push-notifications-subscribe';
import { pushNotificationsUnsubscribe } from '../fn/push-notifications/push-notifications-unsubscribe';
import { PushNotificationsUnsubscribe$Params } from '../fn/push-notifications/push-notifications-unsubscribe';

@Injectable({ providedIn: 'root' })
export class PushNotificationsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `pushNotificationsGetPublicKey()` */
  static readonly PushNotificationsGetPublicKeyPath = '/api/PushNotifications/public-key';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pushNotificationsGetPublicKey()` instead.
   *
   * This method doesn't expect any request body.
   */
  pushNotificationsGetPublicKey$Response(params?: PushNotificationsGetPublicKey$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = pushNotificationsGetPublicKey(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pushNotificationsGetPublicKey$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pushNotificationsGetPublicKey(params?: PushNotificationsGetPublicKey$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.pushNotificationsGetPublicKey$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `pushNotificationsSubscribe()` */
  static readonly PushNotificationsSubscribePath = '/api/PushNotifications/subscribe';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pushNotificationsSubscribe()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pushNotificationsSubscribe$Response(params: PushNotificationsSubscribe$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = pushNotificationsSubscribe(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pushNotificationsSubscribe$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pushNotificationsSubscribe(params: PushNotificationsSubscribe$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.pushNotificationsSubscribe$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `pushNotificationsUnsubscribe()` */
  static readonly PushNotificationsUnsubscribePath = '/api/PushNotifications/unsubscribe';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pushNotificationsUnsubscribe()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pushNotificationsUnsubscribe$Response(params: PushNotificationsUnsubscribe$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = pushNotificationsUnsubscribe(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pushNotificationsUnsubscribe$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pushNotificationsUnsubscribe(params: PushNotificationsUnsubscribe$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.pushNotificationsUnsubscribe$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `pushNotificationsSendTestNotification()` */
  static readonly PushNotificationsSendTestNotificationPath = '/api/PushNotifications/test';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pushNotificationsSendTestNotification()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pushNotificationsSendTestNotification$Response(params: PushNotificationsSendTestNotification$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = pushNotificationsSendTestNotification(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pushNotificationsSendTestNotification$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pushNotificationsSendTestNotification(params: PushNotificationsSendTestNotification$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.pushNotificationsSendTestNotification$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
