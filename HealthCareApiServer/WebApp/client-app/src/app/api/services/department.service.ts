/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { departmentDelete } from '../fn/department/department-delete';
import { DepartmentDelete$Params } from '../fn/department/department-delete';
import { departmentGet } from '../fn/department/department-get';
import { DepartmentGet$Params } from '../fn/department/department-get';
import { departmentGetAll } from '../fn/department/department-get-all';
import { DepartmentGetAll$Params } from '../fn/department/department-get-all';
import { DepartmentModel } from '../models/department-model';
import { departmentPost } from '../fn/department/department-post';
import { DepartmentPost$Params } from '../fn/department/department-post';
import { departmentPut } from '../fn/department/department-put';
import { DepartmentPut$Params } from '../fn/department/department-put';

@Injectable({ providedIn: 'root' })
export class DepartmentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `departmentGetAll()` */
  static readonly DepartmentGetAllPath = '/api/Department';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `departmentGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  departmentGetAll$Response(params?: DepartmentGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DepartmentModel>>> {
    const obs = departmentGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `departmentGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  departmentGetAll(params?: DepartmentGetAll$Params, context?: HttpContext): Observable<Array<DepartmentModel>> {
    const resp = this.departmentGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<DepartmentModel>>): Array<DepartmentModel> => r.body)
    );
  }

  /** Path part for operation `departmentPost()` */
  static readonly DepartmentPostPath = '/api/Department';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `departmentPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  departmentPost$Response(params: DepartmentPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = departmentPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `departmentPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  departmentPost(params: DepartmentPost$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.departmentPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `departmentGet()` */
  static readonly DepartmentGetPath = '/api/Department/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `departmentGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  departmentGet$Response(params: DepartmentGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartmentModel>> {
    const obs = departmentGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `departmentGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  departmentGet(params: DepartmentGet$Params, context?: HttpContext): Observable<DepartmentModel> {
    const resp = this.departmentGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<DepartmentModel>): DepartmentModel => r.body)
    );
  }

  /** Path part for operation `departmentPut()` */
  static readonly DepartmentPutPath = '/api/Department/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `departmentPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  departmentPut$Response(params: DepartmentPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = departmentPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `departmentPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  departmentPut(params: DepartmentPut$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.departmentPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `departmentDelete()` */
  static readonly DepartmentDeletePath = '/api/Department/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `departmentDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  departmentDelete$Response(params: DepartmentDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = departmentDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `departmentDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  departmentDelete(params: DepartmentDelete$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.departmentDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
