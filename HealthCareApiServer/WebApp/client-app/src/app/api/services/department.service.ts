/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDepartmentGet$Json } from '../fn/department/api-department-get-json';
import { ApiDepartmentGet$Json$Params } from '../fn/department/api-department-get-json';
import { apiDepartmentGet$Plain } from '../fn/department/api-department-get-plain';
import { ApiDepartmentGet$Plain$Params } from '../fn/department/api-department-get-plain';
import { apiDepartmentIdDelete } from '../fn/department/api-department-id-delete';
import { ApiDepartmentIdDelete$Params } from '../fn/department/api-department-id-delete';
import { apiDepartmentIdGet$Json } from '../fn/department/api-department-id-get-json';
import { ApiDepartmentIdGet$Json$Params } from '../fn/department/api-department-id-get-json';
import { apiDepartmentIdGet$Plain } from '../fn/department/api-department-id-get-plain';
import { ApiDepartmentIdGet$Plain$Params } from '../fn/department/api-department-id-get-plain';
import { apiDepartmentIdPut } from '../fn/department/api-department-id-put';
import { ApiDepartmentIdPut$Params } from '../fn/department/api-department-id-put';
import { apiDepartmentPost } from '../fn/department/api-department-post';
import { ApiDepartmentPost$Params } from '../fn/department/api-department-post';
import { DepartmentModel } from '../models/department-model';

@Injectable({ providedIn: 'root' })
export class DepartmentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDepartmentGet()` */
  static readonly ApiDepartmentGetPath = '/api/Department';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentGet$Plain$Response(params?: ApiDepartmentGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DepartmentModel>>> {
    const obs = apiDepartmentGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentGet$Plain(params?: ApiDepartmentGet$Plain$Params, context?: HttpContext): Observable<Array<DepartmentModel>> {
    const resp = this.apiDepartmentGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<DepartmentModel>>): Array<DepartmentModel> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentGet$Json$Response(params?: ApiDepartmentGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DepartmentModel>>> {
    const obs = apiDepartmentGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentGet$Json(params?: ApiDepartmentGet$Json$Params, context?: HttpContext): Observable<Array<DepartmentModel>> {
    const resp = this.apiDepartmentGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<DepartmentModel>>): Array<DepartmentModel> => r.body)
    );
  }

  /** Path part for operation `apiDepartmentPost()` */
  static readonly ApiDepartmentPostPath = '/api/Department';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDepartmentPost$Response(params?: ApiDepartmentPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiDepartmentPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDepartmentPost(params?: ApiDepartmentPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiDepartmentPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDepartmentIdGet()` */
  static readonly ApiDepartmentIdGetPath = '/api/Department/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdGet$Plain$Response(params: ApiDepartmentIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartmentModel>> {
    const obs = apiDepartmentIdGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdGet$Plain(params: ApiDepartmentIdGet$Plain$Params, context?: HttpContext): Observable<DepartmentModel> {
    const resp = this.apiDepartmentIdGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<DepartmentModel>): DepartmentModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdGet$Json$Response(params: ApiDepartmentIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartmentModel>> {
    const obs = apiDepartmentIdGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdGet$Json(params: ApiDepartmentIdGet$Json$Params, context?: HttpContext): Observable<DepartmentModel> {
    const resp = this.apiDepartmentIdGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<DepartmentModel>): DepartmentModel => r.body)
    );
  }

  /** Path part for operation `apiDepartmentIdPut()` */
  static readonly ApiDepartmentIdPutPath = '/api/Department/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDepartmentIdPut$Response(params: ApiDepartmentIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiDepartmentIdPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDepartmentIdPut(params: ApiDepartmentIdPut$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiDepartmentIdPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDepartmentIdDelete()` */
  static readonly ApiDepartmentIdDeletePath = '/api/Department/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDepartmentIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdDelete$Response(params: ApiDepartmentIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiDepartmentIdDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDepartmentIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDepartmentIdDelete(params: ApiDepartmentIdDelete$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiDepartmentIdDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
