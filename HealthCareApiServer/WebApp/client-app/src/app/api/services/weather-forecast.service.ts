/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Doctor } from '../models/doctor';
import { weatherForecastGet } from '../fn/weather-forecast/weather-forecast-get';
import { WeatherForecastGet$Params } from '../fn/weather-forecast/weather-forecast-get';

@Injectable({ providedIn: 'root' })
export class WeatherForecastService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `weatherForecastGet()` */
  static readonly WeatherForecastGetPath = '/WeatherForecast';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `weatherForecastGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  weatherForecastGet$Response(params?: WeatherForecastGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Doctor>>> {
    const obs = weatherForecastGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `weatherForecastGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  weatherForecastGet(params?: WeatherForecastGet$Params, context?: HttpContext): Observable<Array<Doctor>> {
    const resp = this.weatherForecastGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<Doctor>>): Array<Doctor> => r.body)
    );
  }

}
