/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { patientDelete } from '../fn/patient/patient-delete';
import { PatientDelete$Params } from '../fn/patient/patient-delete';
import { patientGet } from '../fn/patient/patient-get';
import { PatientGet$Params } from '../fn/patient/patient-get';
import { patientGetAll } from '../fn/patient/patient-get-all';
import { PatientGetAll$Params } from '../fn/patient/patient-get-all';
import { PatientModel } from '../models/patient-model';
import { patientPost } from '../fn/patient/patient-post';
import { PatientPost$Params } from '../fn/patient/patient-post';
import { patientPut } from '../fn/patient/patient-put';
import { PatientPut$Params } from '../fn/patient/patient-put';

@Injectable({ providedIn: 'root' })
export class PatientService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `patientGetAll()` */
  static readonly PatientGetAllPath = '/api/Patient';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientGetAll$Response(params?: PatientGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PatientModel>>> {
    const obs = patientGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientGetAll(params?: PatientGetAll$Params, context?: HttpContext): Observable<Array<PatientModel>> {
    const resp = this.patientGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<PatientModel>>): Array<PatientModel> => r.body)
    );
  }

  /** Path part for operation `patientPost()` */
  static readonly PatientPostPath = '/api/Patient';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patientPost$Response(params: PatientPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = patientPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patientPost(params: PatientPost$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.patientPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `patientGet()` */
  static readonly PatientGetPath = '/api/Patient/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientGet$Response(params: PatientGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PatientModel>> {
    const obs = patientGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientGet(params: PatientGet$Params, context?: HttpContext): Observable<PatientModel> {
    const resp = this.patientGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PatientModel>): PatientModel => r.body)
    );
  }

  /** Path part for operation `patientPut()` */
  static readonly PatientPutPath = '/api/Patient/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patientPut$Response(params: PatientPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = patientPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patientPut(params: PatientPut$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.patientPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `patientDelete()` */
  static readonly PatientDeletePath = '/api/Patient/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientDelete$Response(params: PatientDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = patientDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientDelete(params: PatientDelete$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.patientDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
