/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDoctorCreatePost } from '../fn/doctor/api-doctor-create-post';
import { ApiDoctorCreatePost$Params } from '../fn/doctor/api-doctor-create-post';
import { apiDoctorGet$Json } from '../fn/doctor/api-doctor-get-json';
import { ApiDoctorGet$Json$Params } from '../fn/doctor/api-doctor-get-json';
import { apiDoctorGet$Plain } from '../fn/doctor/api-doctor-get-plain';
import { ApiDoctorGet$Plain$Params } from '../fn/doctor/api-doctor-get-plain';
import { apiDoctorIdDelete } from '../fn/doctor/api-doctor-id-delete';
import { ApiDoctorIdDelete$Params } from '../fn/doctor/api-doctor-id-delete';
import { apiDoctorIdGet$Json } from '../fn/doctor/api-doctor-id-get-json';
import { ApiDoctorIdGet$Json$Params } from '../fn/doctor/api-doctor-id-get-json';
import { apiDoctorIdGet$Plain } from '../fn/doctor/api-doctor-id-get-plain';
import { ApiDoctorIdGet$Plain$Params } from '../fn/doctor/api-doctor-id-get-plain';
import { apiDoctorIdPut } from '../fn/doctor/api-doctor-id-put';
import { ApiDoctorIdPut$Params } from '../fn/doctor/api-doctor-id-put';
import { apiDoctorPost } from '../fn/doctor/api-doctor-post';
import { ApiDoctorPost$Params } from '../fn/doctor/api-doctor-post';
import { DoctorModel } from '../models/doctor-model';

@Injectable({ providedIn: 'root' })
export class DoctorService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDoctorCreatePost()` */
  static readonly ApiDoctorCreatePostPath = '/api/Doctor/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDoctorCreatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDoctorCreatePost$Response(params?: ApiDoctorCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiDoctorCreatePost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDoctorCreatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDoctorCreatePost(params?: ApiDoctorCreatePost$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiDoctorCreatePost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDoctorGet()` */
  static readonly ApiDoctorGetPath = '/api/Doctor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDoctorGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorGet$Plain$Response(params?: ApiDoctorGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DoctorModel>>> {
    const obs = apiDoctorGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDoctorGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorGet$Plain(params?: ApiDoctorGet$Plain$Params, context?: HttpContext): Observable<Array<DoctorModel>> {
    const resp = this.apiDoctorGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<DoctorModel>>): Array<DoctorModel> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDoctorGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorGet$Json$Response(params?: ApiDoctorGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DoctorModel>>> {
    const obs = apiDoctorGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDoctorGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorGet$Json(params?: ApiDoctorGet$Json$Params, context?: HttpContext): Observable<Array<DoctorModel>> {
    const resp = this.apiDoctorGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<DoctorModel>>): Array<DoctorModel> => r.body)
    );
  }

  /** Path part for operation `apiDoctorPost()` */
  static readonly ApiDoctorPostPath = '/api/Doctor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDoctorPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDoctorPost$Response(params?: ApiDoctorPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiDoctorPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDoctorPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDoctorPost(params?: ApiDoctorPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiDoctorPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDoctorIdGet()` */
  static readonly ApiDoctorIdGetPath = '/api/Doctor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDoctorIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorIdGet$Plain$Response(params: ApiDoctorIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DoctorModel>> {
    const obs = apiDoctorIdGet$Plain(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDoctorIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorIdGet$Plain(params: ApiDoctorIdGet$Plain$Params, context?: HttpContext): Observable<DoctorModel> {
    const resp = this.apiDoctorIdGet$Plain$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<DoctorModel>): DoctorModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDoctorIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorIdGet$Json$Response(params: ApiDoctorIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DoctorModel>> {
    const obs = apiDoctorIdGet$Json(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDoctorIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorIdGet$Json(params: ApiDoctorIdGet$Json$Params, context?: HttpContext): Observable<DoctorModel> {
    const resp = this.apiDoctorIdGet$Json$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<DoctorModel>): DoctorModel => r.body)
    );
  }

  /** Path part for operation `apiDoctorIdPut()` */
  static readonly ApiDoctorIdPutPath = '/api/Doctor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDoctorIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDoctorIdPut$Response(params: ApiDoctorIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiDoctorIdPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDoctorIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDoctorIdPut(params: ApiDoctorIdPut$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiDoctorIdPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDoctorIdDelete()` */
  static readonly ApiDoctorIdDeletePath = '/api/Doctor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDoctorIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorIdDelete$Response(params: ApiDoctorIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = apiDoctorIdDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDoctorIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDoctorIdDelete(params: ApiDoctorIdDelete$Params, context?: HttpContext): Observable<void> {
    const resp = this.apiDoctorIdDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
