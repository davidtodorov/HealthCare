/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AppointmentModel } from '../models/appointment-model';
import { doctorCreate } from '../fn/doctor/doctor-create';
import { DoctorCreate$Params } from '../fn/doctor/doctor-create';
import { doctorDelete } from '../fn/doctor/doctor-delete';
import { DoctorDelete$Params } from '../fn/doctor/doctor-delete';
import { doctorGet } from '../fn/doctor/doctor-get';
import { DoctorGet$Params } from '../fn/doctor/doctor-get';
import { doctorGetAll } from '../fn/doctor/doctor-get-all';
import { DoctorGetAll$Params } from '../fn/doctor/doctor-get-all';
import { doctorGetAppointmentsForDoctor } from '../fn/doctor/doctor-get-appointments-for-doctor';
import { DoctorGetAppointmentsForDoctor$Params } from '../fn/doctor/doctor-get-appointments-for-doctor';
import { DoctorModel } from '../models/doctor-model';
import { doctorPost } from '../fn/doctor/doctor-post';
import { DoctorPost$Params } from '../fn/doctor/doctor-post';
import { doctorPut } from '../fn/doctor/doctor-put';
import { DoctorPut$Params } from '../fn/doctor/doctor-put';

@Injectable({ providedIn: 'root' })
export class DoctorService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `doctorCreate()` */
  static readonly DoctorCreatePath = '/api/Doctor/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `doctorCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  doctorCreate$Response(params: DoctorCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = doctorCreate(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `doctorCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  doctorCreate(params: DoctorCreate$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.doctorCreate$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `doctorGetAppointmentsForDoctor()` */
  static readonly DoctorGetAppointmentsForDoctorPath = '/api/Doctor/GetAppointmentsForDoctor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `doctorGetAppointmentsForDoctor()` instead.
   *
   * This method doesn't expect any request body.
   */
  doctorGetAppointmentsForDoctor$Response(params?: DoctorGetAppointmentsForDoctor$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AppointmentModel>>> {
    const obs = doctorGetAppointmentsForDoctor(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `doctorGetAppointmentsForDoctor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  doctorGetAppointmentsForDoctor(params?: DoctorGetAppointmentsForDoctor$Params, context?: HttpContext): Observable<Array<AppointmentModel>> {
    const resp = this.doctorGetAppointmentsForDoctor$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<AppointmentModel>>): Array<AppointmentModel> => r.body)
    );
  }

  /** Path part for operation `doctorGetAll()` */
  static readonly DoctorGetAllPath = '/api/Doctor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `doctorGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  doctorGetAll$Response(params?: DoctorGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DoctorModel>>> {
    const obs = doctorGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `doctorGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  doctorGetAll(params?: DoctorGetAll$Params, context?: HttpContext): Observable<Array<DoctorModel>> {
    const resp = this.doctorGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<DoctorModel>>): Array<DoctorModel> => r.body)
    );
  }

  /** Path part for operation `doctorPost()` */
  static readonly DoctorPostPath = '/api/Doctor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `doctorPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  doctorPost$Response(params: DoctorPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = doctorPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `doctorPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  doctorPost(params: DoctorPost$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.doctorPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `doctorGet()` */
  static readonly DoctorGetPath = '/api/Doctor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `doctorGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  doctorGet$Response(params: DoctorGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DoctorModel>> {
    const obs = doctorGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `doctorGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  doctorGet(params: DoctorGet$Params, context?: HttpContext): Observable<DoctorModel> {
    const resp = this.doctorGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<DoctorModel>): DoctorModel => r.body)
    );
  }

  /** Path part for operation `doctorPut()` */
  static readonly DoctorPutPath = '/api/Doctor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `doctorPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  doctorPut$Response(params: DoctorPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = doctorPut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `doctorPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  doctorPut(params: DoctorPut$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.doctorPut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `doctorDelete()` */
  static readonly DoctorDeletePath = '/api/Doctor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `doctorDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  doctorDelete$Response(params: DoctorDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = doctorDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `doctorDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  doctorDelete(params: DoctorDelete$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.doctorDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
