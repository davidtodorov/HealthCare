/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { prescriptionIntakeDelete } from '../fn/prescription-intake/prescription-intake-delete';
import { PrescriptionIntakeDelete$Params } from '../fn/prescription-intake/prescription-intake-delete';
import { prescriptionIntakeGet } from '../fn/prescription-intake/prescription-intake-get';
import { PrescriptionIntakeGet$Params } from '../fn/prescription-intake/prescription-intake-get';
import { prescriptionIntakeGetAll } from '../fn/prescription-intake/prescription-intake-get-all';
import { PrescriptionIntakeGetAll$Params } from '../fn/prescription-intake/prescription-intake-get-all';
import { prescriptionIntakeGetByPrescription } from '../fn/prescription-intake/prescription-intake-get-by-prescription';
import { PrescriptionIntakeGetByPrescription$Params } from '../fn/prescription-intake/prescription-intake-get-by-prescription';
import { prescriptionIntakeMark } from '../fn/prescription-intake/prescription-intake-mark';
import { PrescriptionIntakeMark$Params } from '../fn/prescription-intake/prescription-intake-mark';
import { PrescriptionIntakeModel } from '../models/prescription-intake-model';
import { prescriptionIntakePost } from '../fn/prescription-intake/prescription-intake-post';
import { PrescriptionIntakePost$Params } from '../fn/prescription-intake/prescription-intake-post';
import { prescriptionIntakePut } from '../fn/prescription-intake/prescription-intake-put';
import { PrescriptionIntakePut$Params } from '../fn/prescription-intake/prescription-intake-put';

@Injectable({ providedIn: 'root' })
export class PrescriptionIntakeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `prescriptionIntakeGetByPrescription()` */
  static readonly PrescriptionIntakeGetByPrescriptionPath = '/api/PrescriptionIntake/ByPrescription/{prescriptionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionIntakeGetByPrescription()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionIntakeGetByPrescription$Response(params: PrescriptionIntakeGetByPrescription$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PrescriptionIntakeModel>>> {
    const obs = prescriptionIntakeGetByPrescription(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionIntakeGetByPrescription$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionIntakeGetByPrescription(params: PrescriptionIntakeGetByPrescription$Params, context?: HttpContext): Observable<Array<PrescriptionIntakeModel>> {
    const resp = this.prescriptionIntakeGetByPrescription$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<PrescriptionIntakeModel>>): Array<PrescriptionIntakeModel> => r.body)
    );
  }

  /** Path part for operation `prescriptionIntakeMark()` */
  static readonly PrescriptionIntakeMarkPath = '/api/PrescriptionIntake/Mark';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionIntakeMark()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionIntakeMark$Response(params: PrescriptionIntakeMark$Params, context?: HttpContext): Observable<StrictHttpResponse<PrescriptionIntakeModel>> {
    const obs = prescriptionIntakeMark(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionIntakeMark$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionIntakeMark(params: PrescriptionIntakeMark$Params, context?: HttpContext): Observable<PrescriptionIntakeModel> {
    const resp = this.prescriptionIntakeMark$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PrescriptionIntakeModel>): PrescriptionIntakeModel => r.body)
    );
  }

  /** Path part for operation `prescriptionIntakeGetAll()` */
  static readonly PrescriptionIntakeGetAllPath = '/api/PrescriptionIntake';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionIntakeGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionIntakeGetAll$Response(params?: PrescriptionIntakeGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PrescriptionIntakeModel>>> {
    const obs = prescriptionIntakeGetAll(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionIntakeGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionIntakeGetAll(params?: PrescriptionIntakeGetAll$Params, context?: HttpContext): Observable<Array<PrescriptionIntakeModel>> {
    const resp = this.prescriptionIntakeGetAll$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<PrescriptionIntakeModel>>): Array<PrescriptionIntakeModel> => r.body)
    );
  }

  /** Path part for operation `prescriptionIntakePost()` */
  static readonly PrescriptionIntakePostPath = '/api/PrescriptionIntake';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionIntakePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionIntakePost$Response(params: PrescriptionIntakePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = prescriptionIntakePost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionIntakePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionIntakePost(params: PrescriptionIntakePost$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.prescriptionIntakePost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `prescriptionIntakeGet()` */
  static readonly PrescriptionIntakeGetPath = '/api/PrescriptionIntake/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionIntakeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionIntakeGet$Response(params: PrescriptionIntakeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PrescriptionIntakeModel>> {
    const obs = prescriptionIntakeGet(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionIntakeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionIntakeGet(params: PrescriptionIntakeGet$Params, context?: HttpContext): Observable<PrescriptionIntakeModel> {
    const resp = this.prescriptionIntakeGet$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PrescriptionIntakeModel>): PrescriptionIntakeModel => r.body)
    );
  }

  /** Path part for operation `prescriptionIntakePut()` */
  static readonly PrescriptionIntakePutPath = '/api/PrescriptionIntake/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionIntakePut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionIntakePut$Response(params: PrescriptionIntakePut$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = prescriptionIntakePut(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionIntakePut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  prescriptionIntakePut(params: PrescriptionIntakePut$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.prescriptionIntakePut$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `prescriptionIntakeDelete()` */
  static readonly PrescriptionIntakeDeletePath = '/api/PrescriptionIntake/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `prescriptionIntakeDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionIntakeDelete$Response(params: PrescriptionIntakeDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    const obs = prescriptionIntakeDelete(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `prescriptionIntakeDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  prescriptionIntakeDelete(params: PrescriptionIntakeDelete$Params, context?: HttpContext): Observable<Blob> {
    const resp = this.prescriptionIntakeDelete$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
